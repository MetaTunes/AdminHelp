<?php

/**
 *
 * Copyright 2016 Macrura
 *
 *
 * ProcessWire 2.x
 * Copyright (C) 2012 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class ProcessAdminHelp extends Process {

	/**
	 * Return information about this module (required)
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Admin Help Page',
			'summary' => 'Shows documentation pages in a single accordion view.',
			'version' => 108,
			'author' => 'Marc W. | @Macrura(community), @outflux3 (Github), http://nibiri.com',
			'href' => 'http://modules.processwire.com/',
			'permission' => 'page-edit',
			'requires' => 'AdminHelp',
			'icon'	   => 'life-ring'
		);
	}

	/**
	 * The name that will be used for the page this module creates
	 *
	 * It should be unique and the same (or similar) to the module name, but all lowercase.
	 * It should not be the same as any other ProcessWire admin page name.
	 *
	 */
	const pageName = 'admin-help';

	/**
	 * This is an optional initialization function called before any execute functions.
	 *
	 */
	public function init() {
		parent::init(); // required
	}

	/**
	 * This function is executed when a page with your Process assigned is accessed.
 	 *
	 * This can be seen as your main or index function. You'll probably want to replace
	 * everything in this function.
	 *
	 */
	public function ___execute() {

		$mainClass = 'AdminHelp';
        $this->user = wire('user');
		$config = wire('config');
        $this->editButtonLabel = $this->_('Edit');
		$addNewDoc = $this->_('Add New Doc');

		$data = wire('modules')->getModuleConfigData($mainClass);
		$docsRootID = (int) $data['helpRoot'];
		$docsRoot = wire('pages')->get($docsRootID);

		$this->config->styles->add($this->config->urls->siteModules . $mainClass . '/' . __CLASS__ . '.css?v=' . time());
		$this->config->styles->add($this->config->urls->siteModules . $mainClass . '/' . $mainClass . '.css?v=' . time());
		$this->config->scripts->add($this->config->urls->siteModules . $mainClass . '/jquery.cbpNTAccordion.min.js');


		$out ="<div id='help-container'><ul id='cbp-ntaccordion' class='cbp-ntaccordion'>";

		foreach($docsRoot->children as $doc) {
			$cls = ' cbp-ntcontent';

			// only output the requested docs and show accordion content instantly
			$docs = wire('input')->get('docs');
			if($docs AND $docs != $doc->name) continue;
			elseif($docs AND $docs == $doc->name) $cls = '';

			$out .= "<li name='{$this->sanitizer->pageName($doc->title, true)}'>
					<h3 class='cbp-nttrigger'><i class='fa fa-file-text-o'></i>&nbsp; {$doc->title}</h3>
					<div class='help-doc".$cls."'>
					{$doc->body}";

            if($this->user->hasRole('superuser')) {
				$out .=
					"<div class='doc-edit'>
						<a href='{$config->urls->admin}page/edit/?id={$doc->id}'><i class='fa fa-pencil'></i> {$this->editButtonLabel}: {$doc->title}</a>
					</div>";
			}

			// Children
            $level = 4;
            if($doc->children->count()) $out .= $this->explodeChildren($config, $doc, $level);

			$out .= "</div></li>";
		}

		$out .= '</ul>';

		// New Doc button
        if($this->user->hasRole('superuser')) {
			$out .= "<div style='float:right;font-size:13px;'>
				<a href='{$config->urls->admin}page/add/?parent_id={$docsRootID}'>
					<button class='ui-button ui-widget ui-corner-all head_button_clone ui-state-default' name='button' value='Add New' type='button'>
					<span class='ui-button-text'><i class='fa fa-plus-circle'></i> {$addNewDoc}</span></button>
				</a>
			</div>";
		}


		$out .= '</div><!-- /docs -->';

		return $out;

	}

    protected function explodeChildren($config, $doc, $level) {
        $out = '';
        $out .= "<ul class='cbp-ntsubaccordion'>";

        foreach($doc->children as $child) {
            $out .= "<li>
								<h{$level} class='cbp-nttrigger'>{$child->title}</h{$level}>
								<div class='cbp-ntcontent'>
									{$child->body}";

            if($this->user->hasRole('superuser')) {
                $out .=
                    "<div class='doc-edit'>
							<a href='{$config->urls->admin}page/edit/?id={$child->id}'><i class='fa fa-pencil'></i> {$this->editButtonLabel}: {$child->title}</a>
						</div>";
            }
            $level += 1;
            if($child->children->count()) $out .= $this->explodeChildren($config, $child, $level);
            $level -= 1;
            $out .= "</div></li>";

        }

        $out .= "</ul>";
        return $out;
    }

	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned.
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName;

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this;

		// we will make the page title the same as our module title
		//$page->title = 'Admin Help';
		$page->title = $this->_('Admin Help');

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}");
	}

	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed.
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this);
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName);

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}");
			$page->delete();
		}
	}

}
